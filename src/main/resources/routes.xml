<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <camelContext
            xmlns="http://camel.apache.org/schema/spring"
            messageHistory="{{camel.messagehistory.enabled:true}}" id="sampleCamel" trace="{{camel.trace.enabled:true}}">
        <properties>
            <property key="CamelLogDebugBodyMaxChars" value="{{camel.log.debugbodymaxchars:1000}}"/>
        </properties>
        <!--<jmxAgent id="agent" disabled="true"/>-->
        <hystrixConfiguration id="restHystrixConfigs" circuitBreakerEnabled="false"
                              executionTimeoutInMilliseconds="20000"
                              circuitBreakerSleepWindowInMilliseconds="10000" circuitBreakerForceClosed="true"/>
        <!-- <propertyPlaceholder id="props" location="classpath:sample.properties"/> -->

        <dataFormats>
            <json id="serializer" library="Jackson" />
        </dataFormats>

        <onException>
            <exception>com.fasterxml.jackson.databind.exc.InvalidFormatException
            </exception>
            <exception>org.apache.camel.component.bean.validator.BeanValidationException
            </exception>
            <exception>org.apache.camel.http.common.HttpOperationFailedException
            </exception>
            <handled>
                <constant>true</constant>
            </handled>
            <transform>
                <simple>${body}</simple>
            </transform>
        </onException>

        <!-- Swagger documentation API endpoint -->
        <restConfiguration component="servlet"
                           host="{{swagger.server.domain}}"
                           port="{{swagger.server.port}}" enableCORS="true"
                           bindingMode="json" contextPath="/sampleservices/storefront"
                           apiContextPath="/v2/api-docs">
            <apiProperty key="schemes" value="{{swagger.server.scheme:http}}" />
            <apiProperty key="api.title" value="Sample Services" />
            <apiProperty key="api.version" value="{{sample.app.version}}" />
            <apiProperty key="api.description"
                         value="test" />
            <corsHeaders key="Access-Control-Allow-Origin" value="{{sample.accessControl.allowOrigin}}" />
            <corsHeaders key="Access-Control-Allow-Methods" value="{{sample.accessControl.allowMethods}}" />
            <corsHeaders key="Access-Control-Allow-Headers" value="{{sample.accessControl.allowHeaders}}" />
            <corsHeaders key="Access-Control-Max-Age" value="{{sample.accessControl.maxAge}}" />
        </restConfiguration>

        <rest tag="Ping" path="/ping">
            <description>Sample Service Ping API for store front operation</description>
            <securityDefinitions>
                <apiKey key="{{sample.auth.key}}" name="{{sample.auth.header}}" inHeader="true"/>
            </securityDefinitions>
            <get produces="text/plain" outType="java.lang.String" id="ping">
                <description>View Ping Response</description>
                <responseMessage message="Success" code="200"/>
                <security key="{{sample.auth.key}}"/>
                <to uri="{{sample.route.ping}}" />
            </get>
        </rest>

        <route id="restSampleClientPing">
            <from uri="direct:restSampleClientPing" />
            <log message="ping call triggered" loggingLevel="DEBUG"
                 logName="MainRoute" />
            <setHeader headerName="Exchange.CONTENT_TYPE">
                <simple>text/plain</simple>
            </setHeader>
            <transform>
                <simple>Service ping ${bean:java.lang.System?method=currentTimeMillis}</simple>
            </transform>
        </route>
    </camelContext>
</beans>
